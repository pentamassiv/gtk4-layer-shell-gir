name: "Build, test, commit"
description: "Builds the code, runs the tests and commits the changes"
inputs:
  commit_message:
    description: "The commit message that will be used"
    required: false
    type: string

runs:
  using: "composite"
  steps:
    - name: Build and test sys crates
      shell: bash
      run: |
        set -euo pipefail
        export PATH=$PATH:/github/home/.cargo/bin

        folders=("gtk4-layer-shell" "gtk4-session-lock")
        for folder in "${folders[@]}"; do
          echo "::group::[SYS] Processing crate: ${folder}-sys"
          cd "${folder}-sys"

          echo "🔍 Checking gir output..."
          if [[ $(gir -o . |& wc -l) -ne 0 ]]; then
            echo "::error::[SYS ${folder}] gir -o produced output, possible error"
            exit 1
          fi

          echo "📦 Running cargo update..."
          cargo update
          echo "🔨 Building (all features)..."
          cargo build --verbose --all-features
          echo "✅ Running tests..."
          cargo test --verbose --all-features
          echo "📚 Building docs..."
          cargo doc --all-features

          cd ..
          echo "::endgroup::"
        done

    - name: Build and test wrapper crates
      shell: bash
      run: |
        set -euo pipefail
        export PATH=$PATH:/github/home/.cargo/bin
        folders=("gtk4-layer-shell" "gtk4-session-lock")
        for folder in "${folders[@]}"; do
          echo "::group::[WRAPPER] Processing crate: ${folder}"
          cd "${folder}"

          echo "🔍 Generating code"
          if [[ $(gir -o . |& wc -l) -ne 0 ]]; then
            echo "::error::[WRAPPER ${folder}] gir -o produced output"
            exit 1
          fi
          echo "🔍 Checking if some code was not generated"
          if [[ $(gir -o . -m not_bound |& wc -l) -ne 0 ]]; then
            echo "::error::[WRAPPER ${folder}] gir not_bound produced output"
            exit 1
          fi
          echo "🔍 Generating docs"
          if [[ $(gir -c Gir.toml --doc-target-path docs.md -m doc |& wc -l) -ne 0 ]]; then
            echo "::error::[WRAPPER ${folder}] gir docs produced output"
            exit 1
          fi

          echo "📚 Installing rustdoc-stripper..."
          cargo install rustdoc-stripper --force
          rustdoc-stripper -s -n
          rustdoc-stripper -g -o docs.md

          echo "📦 Running cargo update..."
          cargo update
          echo "🔨 Building (all features)..."
          cargo build --verbose --all-features
          echo "✅ Running tests..."
          cargo test --verbose --all-features
          echo "📚 Building docs..."
          cargo doc --all-features
          echo "📂 Building examples..."
          cargo build --examples --all-features

          cd ..
          echo "::endgroup::"
        done

    - name: Count changed files (excluding versions.txt and gir)
      id: changed_files
      if: ${{ inputs.commit_message != '' }}
      shell: bash
      run: |
        set -euo pipefail
        changed=$(git diff --ignore-submodules --name-only -- . \
          ':(exclude)*/src/auto/versions.txt' ':(exclude)gir' | wc -l)
        echo "NO_CHANGED_FILES=$changed" >> $GITHUB_OUTPUT
        echo "Changed files (excluding ignored): $changed"

    - name: Commit code changes to main
      if: inputs.commit_message != '' && steps.changed_files.outputs.NO_CHANGED_FILES != '0'
      uses: stefanzweifel/git-auto-commit-action@v6
      with:
        commit_message: ${{ inputs.commit_message }}

name: "Build, regenerate and test"
description: "Builds the code, uses gir to regenerate the bindings and runs the tests"

runs:
  using: "composite"
  steps:
    - name: Build and test sys crates
      shell: bash
      run: |
        set -euo pipefail
        export PATH=$PATH:/github/home/.cargo/bin

        folders=("gtk4-layer-shell" "gtk4-session-lock")
        for folder in "${folders[@]}"; do
          echo "[SYS] Processing crate: ${folder}-sys"
          cd "${folder}-sys"

          echo "🔍 Checking gir output..."
          gir_output=$(gir -o . 2>&1 || true)
          if [[ -n "$gir_output" ]]; then
            echo "::error::[SYS ${folder}] gir -o produced output"
            echo "$gir_output"
            exit 1
          fi

          echo "::group::📦 Running cargo update..."
          cargo update
          echo "::endgroup::"
          echo "::group::🔨 Building (all features)..."
          cargo build --verbose --all-features
          echo "::endgroup::"
          echo "::group::✅ Running tests..."
          cargo test --verbose --all-features
          echo "::endgroup::"
          echo "::group::📚 Building docs..."
          cargo doc --all-features
          echo "::endgroup::"

          cd ..
        done

    - name: Build and test wrapper crates
      shell: bash
      run: |
        set -euo pipefail
        export PATH=$PATH:/github/home/.cargo/bin
        folders=("gtk4-layer-shell" "gtk4-session-lock")
        for folder in "${folders[@]}"; do
          echo "[WRAPPER] Processing crate: ${folder}"
          cd "${folder}"

          echo "🔍 Generating code"
          echo "::group::gir -o output"
          gir_output=$(gir -o . 2>&1 || true)
          echo "$gir_output"
          echo "::endgroup::"
          if [[ -n "$gir_output" ]]; then
            echo "::error::[WRAPPER ${folder}] gir -o produced output"
            exit 1
          fi

          echo "🔍 Checking if some code was not generated"
          echo "::group::gir not_bound output"
          not_bound_output=$(gir -o . -m not_bound 2>&1 || true)
          echo "$not_bound_output"
          echo "::endgroup::"
          if [[ -n "$not_bound_output" ]]; then
            echo "::error::[WRAPPER ${folder}] gir not_bound produced output"
            exit 1
          fi

          echo "🔍 Generating docs"
          echo "::group::gir docs output"
          doc_output=$(gir -c Gir.toml --doc-target-path docs.md -m doc 2>&1 || true)
          echo "$doc_output"
          echo "::endgroup::"
          if [[ -n "$doc_output" ]]; then
            echo "::error::[WRAPPER ${folder}] gir docs produced output"
            exit 1
          fi

          echo "📚 Installing rustdoc-stripper..."
          cargo install rustdoc-stripper --force
          rustdoc-stripper -s -n
          rustdoc-stripper -g -o docs.md

          
          echo "::group::📦 Running cargo update..."
          cargo update
          echo "::endgroup::"
          echo "::group::🔨 Building (all features)..."
          cargo build --verbose --all-features
          echo "::endgroup::"
          echo "::group::✅ Running tests..."
          cargo test --verbose --all-features
          echo "::endgroup::"
          echo "::group::📚 Building docs..."
          cargo doc --all-features
          echo "::endgroup::"
          echo "::group::📂 Building examples..."
          cargo build --examples --all-features
          echo "::endgroup::"

          cd ..
        done